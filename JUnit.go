package main

import (
	//"encoding/json"
	"encoding/xml"
	//"fmt"
	"log"
	"os"
	//"strconv"
	"time"

	"github.com/educlos/testrail"
	//str2duration "github.com/xhit/go-str2duration/v2"
	"golang.org/x/net/html/charset"
)

// Testsuites struct below is autogenerated using the awesome https://www.onlinetool.io/xmltogo/ tool!
// Testsuites mirrors the structure of JUnit XML output
type Testsuites struct {
	XMLName   xml.Name `xml:"testsuites"`
	Text      string   `xml:",chardata"`
	Testsuite struct {
		Text       string `xml:",chardata"`
		Tests      string `xml:"tests,attr"`
		Failures   string `xml:"failures,attr"`
		Time       string `xml:"time,attr"`
		Name       string `xml:"name,attr"`
		Properties struct {
			Text     string `xml:",chardata"`
			Property struct {
				Text  string `xml:",chardata"`
				Name  string `xml:"name,attr"`
				Value string `xml:"value,attr"`
			} `xml:"property"`
		} `xml:"properties"`
		Testcase []struct {
			Text      string `xml:",chardata"`
			Classname string `xml:"classname,attr"`
			Name      string `xml:"name,attr"`
			Time      string `xml:"time,attr"`
			Failure   struct {
				Text    string `xml:",chardata"`
				Message string `xml:"message,attr"`
				Type    string `xml:"type,attr"`
			} `xml:"failure"`
		} `xml:"testcase"`
	} `xml:"testsuite"`
} 

func readEnvVars() (string, string, string) {
	testRailServer := os.Getenv("TESTRAIL_SERVER")
	if testRailServer == "" {
		log.Fatalln("Environment variable TESTRAIL_SERVER not specified")
	}
	username := os.Getenv("USERNAME")
	if username == "" {
		log.Fatalln("Environment variable USERNAME not specified")
	}	
	password := os.Getenv("PASSWORD")
	if password == "" {
		log.Fatalln("Environment variable PASSWORD not specified")
	}
	return testRailServer,username,password
}

func readJunitXML(file *os.File) Testsuites {
	dec := xml.NewDecoder(file)
	dec.CharsetReader = charset.NewReaderLabel
	dec.Strict = false

	var doc Testsuites
	if err := dec.Decode(&doc); err != nil {
		log.Fatal(err)
	}
	return doc
}

func logJunitDetail(j Testsuites) {
	for i,tc := range j.Testsuite.Testcase {
		log.Printf("%v\n",j)
		log.Printf("%v\n",tc)
		log.Printf("Number of tests: %v\n", j.Testsuite.Tests)
		log.Printf("Number of failed tests: %v\n", j.Testsuite.Failures)
		log.Printf("Testcase %d: %v\n", i, tc)
		log.Printf("Testcase %d name: %v\n", i, tc.Name)
		log.Printf("Testcase %d failure message: %v\n", i,tc.Failure.Text)
		log.Println("-------------------------------------------")	
	}
}

func processResultsToTestRail(j Testsuites, testRailServer string, username string, password string) {
	//logJunitDetail(j)
	//log.Printf("TESTRAIL_SERVER: %s, USERNAME: %s, PASSWORD: %s\n", testRailServer, username, password)
	now := time.Now().Format("2006-01-02 15:04:05")

	client := testrail.NewClient(testRailServer, username, password)
	for i,tc := range j.Testsuite.Testcase {

		//duration,err := str2duration.ParseDuration(fmt.Sprintf("%ss",tc.Time))
		//if err != nil {
		//	log.Fatalf("Error converting %v to duration\n",tc.Time)
		//}
		var tcStatus int
		if tc.Failure.Text == "" {
			tcStatus = testrail.StatusPassed
		} else {
			tcStatus = testrail.StatusFailed
		}

		tsr := testrail.SendableResult{
			//Elapsed: *testrail.TimespanFromDuration(duration),
			StatusID: tcStatus,
			Comment: tc.Failure.Text,
			Version: now,
			Defects: "",
			//AssignedToID: 1,
		}

		log.Printf("tsr: %v\n", tsr)
		result,err := client.AddResultForCase(1, 1, tsr)
		if err != nil {
			log.Fatalf("Error adding results for test case %d: %v\n", i, err)
		}
		log.Printf("Success adding results for test case %d: %v\n", i, result)
	}
}

func main() {
	testRailServer, username, password := readEnvVars()
	junitDoc := readJunitXML(os.Stdin)
	processResultsToTestRail(junitDoc, testRailServer, username, password)	
	//log.Printf("Results: %v\n", success)
}